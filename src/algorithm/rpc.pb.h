// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPrepareRequestImpl();
void InitDefaultsPrepareRequest();
void InitDefaultsPrepareReplyImpl();
void InitDefaultsPrepareReply();
void InitDefaultsAcceptRequestImpl();
void InitDefaultsAcceptRequest();
void InitDefaultsAcceptReplyImpl();
void InitDefaultsAcceptReply();
void InitDefaultsSuccessRequestImpl();
void InitDefaultsSuccessRequest();
void InitDefaultsSuccessReplyImpl();
void InitDefaultsSuccessReply();
inline void InitDefaults() {
  InitDefaultsPrepareRequest();
  InitDefaultsPrepareReply();
  InitDefaultsAcceptRequest();
  InitDefaultsAcceptReply();
  InitDefaultsSuccessRequest();
  InitDefaultsSuccessReply();
}
}  // namespace protobuf_rpc_2eproto
class AcceptReply;
class AcceptReplyDefaultTypeInternal;
extern AcceptReplyDefaultTypeInternal _AcceptReply_default_instance_;
class AcceptRequest;
class AcceptRequestDefaultTypeInternal;
extern AcceptRequestDefaultTypeInternal _AcceptRequest_default_instance_;
class PrepareReply;
class PrepareReplyDefaultTypeInternal;
extern PrepareReplyDefaultTypeInternal _PrepareReply_default_instance_;
class PrepareRequest;
class PrepareRequestDefaultTypeInternal;
extern PrepareRequestDefaultTypeInternal _PrepareRequest_default_instance_;
class SuccessReply;
class SuccessReplyDefaultTypeInternal;
extern SuccessReplyDefaultTypeInternal _SuccessReply_default_instance_;
class SuccessRequest;
class SuccessRequestDefaultTypeInternal;
extern SuccessRequestDefaultTypeInternal _SuccessRequest_default_instance_;

// ===================================================================

class PrepareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PrepareRequest) */ {
 public:
  PrepareRequest();
  virtual ~PrepareRequest();

  PrepareRequest(const PrepareRequest& from);

  inline PrepareRequest& operator=(const PrepareRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareRequest(PrepareRequest&& from) noexcept
    : PrepareRequest() {
    *this = ::std::move(from);
  }

  inline PrepareRequest& operator=(PrepareRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareRequest* internal_default_instance() {
    return reinterpret_cast<const PrepareRequest*>(
               &_PrepareRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PrepareRequest* other);
  friend void swap(PrepareRequest& a, PrepareRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareRequest& from);
  void MergeFrom(const PrepareRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 InstanceID = 1;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 ProposalID = 3;
  void clear_proposalid();
  static const int kProposalIDFieldNumber = 3;
  ::google::protobuf::uint64 proposalid() const;
  void set_proposalid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PrepareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 proposalid_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsPrepareRequestImpl();
};
// -------------------------------------------------------------------

class PrepareReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PrepareReply) */ {
 public:
  PrepareReply();
  virtual ~PrepareReply();

  PrepareReply(const PrepareReply& from);

  inline PrepareReply& operator=(const PrepareReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrepareReply(PrepareReply&& from) noexcept
    : PrepareReply() {
    *this = ::std::move(from);
  }

  inline PrepareReply& operator=(PrepareReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrepareReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareReply* internal_default_instance() {
    return reinterpret_cast<const PrepareReply*>(
               &_PrepareReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PrepareReply* other);
  friend void swap(PrepareReply& a, PrepareReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrepareReply* New() const PROTOBUF_FINAL { return New(NULL); }

  PrepareReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrepareReply& from);
  void MergeFrom(const PrepareReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrepareReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint64 InstanceID = 1;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 ProposalID = 3;
  void clear_proposalid();
  static const int kProposalIDFieldNumber = 3;
  ::google::protobuf::uint64 proposalid() const;
  void set_proposalid(::google::protobuf::uint64 value);

  // bool NoMoreAccepted = 5;
  void clear_nomoreaccepted();
  static const int kNoMoreAcceptedFieldNumber = 5;
  bool nomoreaccepted() const;
  void set_nomoreaccepted(bool value);

  // @@protoc_insertion_point(class_scope:PrepareReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 proposalid_;
  bool nomoreaccepted_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsPrepareReplyImpl();
};
// -------------------------------------------------------------------

class AcceptRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AcceptRequest) */ {
 public:
  AcceptRequest();
  virtual ~AcceptRequest();

  AcceptRequest(const AcceptRequest& from);

  inline AcceptRequest& operator=(const AcceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptRequest(AcceptRequest&& from) noexcept
    : AcceptRequest() {
    *this = ::std::move(from);
  }

  inline AcceptRequest& operator=(AcceptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptRequest*>(
               &_AcceptRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AcceptRequest* other);
  friend void swap(AcceptRequest& a, AcceptRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptRequest& from);
  void MergeFrom(const AcceptRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint64 InstanceID = 1;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 ProposalID = 3;
  void clear_proposalid();
  static const int kProposalIDFieldNumber = 3;
  ::google::protobuf::uint64 proposalid() const;
  void set_proposalid(::google::protobuf::uint64 value);

  // uint64 FirstUnchosenIndex = 5;
  void clear_firstunchosenindex();
  static const int kFirstUnchosenIndexFieldNumber = 5;
  ::google::protobuf::uint64 firstunchosenindex() const;
  void set_firstunchosenindex(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AcceptRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 proposalid_;
  ::google::protobuf::uint64 firstunchosenindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsAcceptRequestImpl();
};
// -------------------------------------------------------------------

class AcceptReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AcceptReply) */ {
 public:
  AcceptReply();
  virtual ~AcceptReply();

  AcceptReply(const AcceptReply& from);

  inline AcceptReply& operator=(const AcceptReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptReply(AcceptReply&& from) noexcept
    : AcceptReply() {
    *this = ::std::move(from);
  }

  inline AcceptReply& operator=(AcceptReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptReply* internal_default_instance() {
    return reinterpret_cast<const AcceptReply*>(
               &_AcceptReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AcceptReply* other);
  friend void swap(AcceptReply& a, AcceptReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptReply* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptReply& from);
  void MergeFrom(const AcceptReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 InstanceID = 1;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // uint64 NodeID = 3;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 3;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 ProposalID = 4;
  void clear_proposalid();
  static const int kProposalIDFieldNumber = 4;
  ::google::protobuf::uint64 proposalid() const;
  void set_proposalid(::google::protobuf::uint64 value);

  // uint64 FirstUnchosenIndex = 5;
  void clear_firstunchosenindex();
  static const int kFirstUnchosenIndexFieldNumber = 5;
  ::google::protobuf::uint64 firstunchosenindex() const;
  void set_firstunchosenindex(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AcceptReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 proposalid_;
  ::google::protobuf::uint64 firstunchosenindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsAcceptReplyImpl();
};
// -------------------------------------------------------------------

class SuccessRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SuccessRequest) */ {
 public:
  SuccessRequest();
  virtual ~SuccessRequest();

  SuccessRequest(const SuccessRequest& from);

  inline SuccessRequest& operator=(const SuccessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuccessRequest(SuccessRequest&& from) noexcept
    : SuccessRequest() {
    *this = ::std::move(from);
  }

  inline SuccessRequest& operator=(SuccessRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SuccessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuccessRequest* internal_default_instance() {
    return reinterpret_cast<const SuccessRequest*>(
               &_SuccessRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SuccessRequest* other);
  friend void swap(SuccessRequest& a, SuccessRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuccessRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SuccessRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuccessRequest& from);
  void MergeFrom(const SuccessRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuccessRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // uint64 InstanceID = 1;
  void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  ::google::protobuf::uint64 instanceid() const;
  void set_instanceid(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SuccessRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 nodeid_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsSuccessRequestImpl();
};
// -------------------------------------------------------------------

class SuccessReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SuccessReply) */ {
 public:
  SuccessReply();
  virtual ~SuccessReply();

  SuccessReply(const SuccessReply& from);

  inline SuccessReply& operator=(const SuccessReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuccessReply(SuccessReply&& from) noexcept
    : SuccessReply() {
    *this = ::std::move(from);
  }

  inline SuccessReply& operator=(SuccessReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SuccessReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuccessReply* internal_default_instance() {
    return reinterpret_cast<const SuccessReply*>(
               &_SuccessReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SuccessReply* other);
  friend void swap(SuccessReply& a, SuccessReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuccessReply* New() const PROTOBUF_FINAL { return New(NULL); }

  SuccessReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SuccessReply& from);
  void MergeFrom(const SuccessReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SuccessReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 FirstUnchosenIndex = 1;
  void clear_firstunchosenindex();
  static const int kFirstUnchosenIndexFieldNumber = 1;
  ::google::protobuf::uint64 firstunchosenindex() const;
  void set_firstunchosenindex(::google::protobuf::uint64 value);

  // uint64 NodeID = 2;
  void clear_nodeid();
  static const int kNodeIDFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SuccessReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 firstunchosenindex_;
  ::google::protobuf::uint64 nodeid_;
  mutable int _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
  friend void ::protobuf_rpc_2eproto::InitDefaultsSuccessReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrepareRequest

// uint64 InstanceID = 1;
inline void PrepareRequest::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:PrepareRequest.InstanceID)
  return instanceid_;
}
inline void PrepareRequest::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:PrepareRequest.InstanceID)
}

// uint64 NodeID = 2;
inline void PrepareRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:PrepareRequest.NodeID)
  return nodeid_;
}
inline void PrepareRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:PrepareRequest.NodeID)
}

// uint64 ProposalID = 3;
inline void PrepareRequest::clear_proposalid() {
  proposalid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareRequest::proposalid() const {
  // @@protoc_insertion_point(field_get:PrepareRequest.ProposalID)
  return proposalid_;
}
inline void PrepareRequest::set_proposalid(::google::protobuf::uint64 value) {
  
  proposalid_ = value;
  // @@protoc_insertion_point(field_set:PrepareRequest.ProposalID)
}

// -------------------------------------------------------------------

// PrepareReply

// uint64 InstanceID = 1;
inline void PrepareReply::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareReply::instanceid() const {
  // @@protoc_insertion_point(field_get:PrepareReply.InstanceID)
  return instanceid_;
}
inline void PrepareReply::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:PrepareReply.InstanceID)
}

// uint64 NodeID = 2;
inline void PrepareReply::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareReply::nodeid() const {
  // @@protoc_insertion_point(field_get:PrepareReply.NodeID)
  return nodeid_;
}
inline void PrepareReply::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:PrepareReply.NodeID)
}

// uint64 ProposalID = 3;
inline void PrepareReply::clear_proposalid() {
  proposalid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrepareReply::proposalid() const {
  // @@protoc_insertion_point(field_get:PrepareReply.ProposalID)
  return proposalid_;
}
inline void PrepareReply::set_proposalid(::google::protobuf::uint64 value) {
  
  proposalid_ = value;
  // @@protoc_insertion_point(field_set:PrepareReply.ProposalID)
}

// bytes Value = 4;
inline void PrepareReply::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrepareReply::value() const {
  // @@protoc_insertion_point(field_get:PrepareReply.Value)
  return value_.GetNoArena();
}
inline void PrepareReply::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrepareReply.Value)
}
#if LANG_CXX11
inline void PrepareReply::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrepareReply.Value)
}
#endif
inline void PrepareReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrepareReply.Value)
}
inline void PrepareReply::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrepareReply.Value)
}
inline ::std::string* PrepareReply::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:PrepareReply.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrepareReply::release_value() {
  // @@protoc_insertion_point(field_release:PrepareReply.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrepareReply::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:PrepareReply.Value)
}

// bool NoMoreAccepted = 5;
inline void PrepareReply::clear_nomoreaccepted() {
  nomoreaccepted_ = false;
}
inline bool PrepareReply::nomoreaccepted() const {
  // @@protoc_insertion_point(field_get:PrepareReply.NoMoreAccepted)
  return nomoreaccepted_;
}
inline void PrepareReply::set_nomoreaccepted(bool value) {
  
  nomoreaccepted_ = value;
  // @@protoc_insertion_point(field_set:PrepareReply.NoMoreAccepted)
}

// -------------------------------------------------------------------

// AcceptRequest

// uint64 InstanceID = 1;
inline void AcceptRequest::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:AcceptRequest.InstanceID)
  return instanceid_;
}
inline void AcceptRequest::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:AcceptRequest.InstanceID)
}

// uint64 NodeID = 2;
inline void AcceptRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:AcceptRequest.NodeID)
  return nodeid_;
}
inline void AcceptRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:AcceptRequest.NodeID)
}

// uint64 ProposalID = 3;
inline void AcceptRequest::clear_proposalid() {
  proposalid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRequest::proposalid() const {
  // @@protoc_insertion_point(field_get:AcceptRequest.ProposalID)
  return proposalid_;
}
inline void AcceptRequest::set_proposalid(::google::protobuf::uint64 value) {
  
  proposalid_ = value;
  // @@protoc_insertion_point(field_set:AcceptRequest.ProposalID)
}

// bytes Value = 4;
inline void AcceptRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptRequest::value() const {
  // @@protoc_insertion_point(field_get:AcceptRequest.Value)
  return value_.GetNoArena();
}
inline void AcceptRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AcceptRequest.Value)
}
#if LANG_CXX11
inline void AcceptRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AcceptRequest.Value)
}
#endif
inline void AcceptRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AcceptRequest.Value)
}
inline void AcceptRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AcceptRequest.Value)
}
inline ::std::string* AcceptRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:AcceptRequest.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptRequest::release_value() {
  // @@protoc_insertion_point(field_release:AcceptRequest.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:AcceptRequest.Value)
}

// uint64 FirstUnchosenIndex = 5;
inline void AcceptRequest::clear_firstunchosenindex() {
  firstunchosenindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptRequest::firstunchosenindex() const {
  // @@protoc_insertion_point(field_get:AcceptRequest.FirstUnchosenIndex)
  return firstunchosenindex_;
}
inline void AcceptRequest::set_firstunchosenindex(::google::protobuf::uint64 value) {
  
  firstunchosenindex_ = value;
  // @@protoc_insertion_point(field_set:AcceptRequest.FirstUnchosenIndex)
}

// -------------------------------------------------------------------

// AcceptReply

// uint64 InstanceID = 1;
inline void AcceptReply::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptReply::instanceid() const {
  // @@protoc_insertion_point(field_get:AcceptReply.InstanceID)
  return instanceid_;
}
inline void AcceptReply::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:AcceptReply.InstanceID)
}

// uint64 NodeID = 3;
inline void AcceptReply::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptReply::nodeid() const {
  // @@protoc_insertion_point(field_get:AcceptReply.NodeID)
  return nodeid_;
}
inline void AcceptReply::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:AcceptReply.NodeID)
}

// uint64 ProposalID = 4;
inline void AcceptReply::clear_proposalid() {
  proposalid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptReply::proposalid() const {
  // @@protoc_insertion_point(field_get:AcceptReply.ProposalID)
  return proposalid_;
}
inline void AcceptReply::set_proposalid(::google::protobuf::uint64 value) {
  
  proposalid_ = value;
  // @@protoc_insertion_point(field_set:AcceptReply.ProposalID)
}

// uint64 FirstUnchosenIndex = 5;
inline void AcceptReply::clear_firstunchosenindex() {
  firstunchosenindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AcceptReply::firstunchosenindex() const {
  // @@protoc_insertion_point(field_get:AcceptReply.FirstUnchosenIndex)
  return firstunchosenindex_;
}
inline void AcceptReply::set_firstunchosenindex(::google::protobuf::uint64 value) {
  
  firstunchosenindex_ = value;
  // @@protoc_insertion_point(field_set:AcceptReply.FirstUnchosenIndex)
}

// -------------------------------------------------------------------

// SuccessRequest

// uint64 InstanceID = 1;
inline void SuccessRequest::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SuccessRequest::instanceid() const {
  // @@protoc_insertion_point(field_get:SuccessRequest.InstanceID)
  return instanceid_;
}
inline void SuccessRequest::set_instanceid(::google::protobuf::uint64 value) {
  
  instanceid_ = value;
  // @@protoc_insertion_point(field_set:SuccessRequest.InstanceID)
}

// uint64 NodeID = 2;
inline void SuccessRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SuccessRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:SuccessRequest.NodeID)
  return nodeid_;
}
inline void SuccessRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:SuccessRequest.NodeID)
}

// bytes Value = 3;
inline void SuccessRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SuccessRequest::value() const {
  // @@protoc_insertion_point(field_get:SuccessRequest.Value)
  return value_.GetNoArena();
}
inline void SuccessRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SuccessRequest.Value)
}
#if LANG_CXX11
inline void SuccessRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SuccessRequest.Value)
}
#endif
inline void SuccessRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SuccessRequest.Value)
}
inline void SuccessRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SuccessRequest.Value)
}
inline ::std::string* SuccessRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:SuccessRequest.Value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuccessRequest::release_value() {
  // @@protoc_insertion_point(field_release:SuccessRequest.Value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuccessRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:SuccessRequest.Value)
}

// -------------------------------------------------------------------

// SuccessReply

// uint64 FirstUnchosenIndex = 1;
inline void SuccessReply::clear_firstunchosenindex() {
  firstunchosenindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SuccessReply::firstunchosenindex() const {
  // @@protoc_insertion_point(field_get:SuccessReply.FirstUnchosenIndex)
  return firstunchosenindex_;
}
inline void SuccessReply::set_firstunchosenindex(::google::protobuf::uint64 value) {
  
  firstunchosenindex_ = value;
  // @@protoc_insertion_point(field_set:SuccessReply.FirstUnchosenIndex)
}

// uint64 NodeID = 2;
inline void SuccessReply::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SuccessReply::nodeid() const {
  // @@protoc_insertion_point(field_get:SuccessReply.NodeID)
  return nodeid_;
}
inline void SuccessReply::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:SuccessReply.NodeID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
