// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class PrepareRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareRequest>
      _instance;
} _PrepareRequest_default_instance_;
class PrepareReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrepareReply>
      _instance;
} _PrepareReply_default_instance_;
class AcceptRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcceptRequest>
      _instance;
} _AcceptRequest_default_instance_;
class AcceptReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcceptReply>
      _instance;
} _AcceptReply_default_instance_;
class SuccessRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SuccessRequest>
      _instance;
} _SuccessRequest_default_instance_;
class SuccessReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SuccessReply>
      _instance;
} _SuccessReply_default_instance_;
namespace protobuf_rpc_2eproto {
void InitDefaultsPrepareRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PrepareRequest_default_instance_;
    new (ptr) ::PrepareRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrepareRequest::InitAsDefaultInstance();
}

void InitDefaultsPrepareRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrepareRequestImpl);
}

void InitDefaultsPrepareReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_PrepareReply_default_instance_;
    new (ptr) ::PrepareReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PrepareReply::InitAsDefaultInstance();
}

void InitDefaultsPrepareReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrepareReplyImpl);
}

void InitDefaultsAcceptRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_AcceptRequest_default_instance_;
    new (ptr) ::AcceptRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcceptRequest::InitAsDefaultInstance();
}

void InitDefaultsAcceptRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcceptRequestImpl);
}

void InitDefaultsAcceptReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_AcceptReply_default_instance_;
    new (ptr) ::AcceptReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcceptReply::InitAsDefaultInstance();
}

void InitDefaultsAcceptReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcceptReplyImpl);
}

void InitDefaultsSuccessRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_SuccessRequest_default_instance_;
    new (ptr) ::SuccessRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SuccessRequest::InitAsDefaultInstance();
}

void InitDefaultsSuccessRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSuccessRequestImpl);
}

void InitDefaultsSuccessReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_SuccessReply_default_instance_;
    new (ptr) ::SuccessReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SuccessReply::InitAsDefaultInstance();
}

void InitDefaultsSuccessReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSuccessReplyImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareRequest, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareRequest, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareRequest, proposalid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, proposalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PrepareReply, nomoreaccepted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, proposalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptRequest, firstunchosenindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptReply, instanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptReply, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptReply, proposalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AcceptReply, firstunchosenindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessRequest, firstunchosenindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessRequest, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessRequest, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessReply, firstunchosenindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SuccessReply, nodeid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PrepareRequest)},
  { 8, -1, sizeof(::PrepareReply)},
  { 18, -1, sizeof(::AcceptRequest)},
  { 28, -1, sizeof(::AcceptReply)},
  { 37, -1, sizeof(::SuccessRequest)},
  { 45, -1, sizeof(::SuccessReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PrepareReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AcceptRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AcceptReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SuccessRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SuccessReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\trpc.proto\"H\n\016PrepareRequest\022\022\n\nInstanc"
      "eID\030\001 \001(\004\022\016\n\006NodeID\030\002 \001(\004\022\022\n\nProposalID\030"
      "\003 \001(\004\"m\n\014PrepareReply\022\022\n\nInstanceID\030\001 \001("
      "\004\022\016\n\006NodeID\030\002 \001(\004\022\022\n\nProposalID\030\003 \001(\004\022\r\n"
      "\005Value\030\004 \001(\014\022\026\n\016NoMoreAccepted\030\005 \001(\010\"r\n\r"
      "AcceptRequest\022\022\n\nInstanceID\030\001 \001(\004\022\016\n\006Nod"
      "eID\030\002 \001(\004\022\022\n\nProposalID\030\003 \001(\004\022\r\n\005Value\030\004"
      " \001(\014\022\032\n\022FirstUnchosenIndex\030\005 \001(\004\"a\n\013Acce"
      "ptReply\022\022\n\nInstanceID\030\001 \001(\004\022\016\n\006NodeID\030\003 "
      "\001(\004\022\022\n\nProposalID\030\004 \001(\004\022\032\n\022FirstUnchosen"
      "Index\030\005 \001(\004\"K\n\016SuccessRequest\022\032\n\022FirstUn"
      "chosenIndex\030\001 \001(\004\022\016\n\006NodeID\030\002 \001(\004\022\r\n\005Val"
      "ue\030\003 \001(\014\":\n\014SuccessReply\022\032\n\022FirstUnchose"
      "nIndex\030\001 \001(\004\022\016\n\006NodeID\030\002 \001(\0042\213\001\n\005Paxos\022+"
      "\n\tOnPrepare\022\017.PrepareRequest\032\r.PrepareRe"
      "ply\022(\n\010OnAccept\022\016.AcceptRequest\032\014.Accept"
      "Reply\022+\n\tOnSuccess\022\017.SuccessRequest\032\r.Su"
      "ccessReplyb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rpc_2eproto

// ===================================================================

void PrepareRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareRequest::kInstanceIDFieldNumber;
const int PrepareRequest::kNodeIDFieldNumber;
const int PrepareRequest::kProposalIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareRequest::PrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsPrepareRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepareRequest)
}
PrepareRequest::PrepareRequest(const PrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&proposalid_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(proposalid_));
  // @@protoc_insertion_point(copy_constructor:PrepareRequest)
}

void PrepareRequest::SharedCtor() {
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposalid_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(proposalid_));
  _cached_size_ = 0;
}

PrepareRequest::~PrepareRequest() {
  // @@protoc_insertion_point(destructor:PrepareRequest)
  SharedDtor();
}

void PrepareRequest::SharedDtor() {
}

void PrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareRequest::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareRequest& PrepareRequest::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsPrepareRequest();
  return *internal_default_instance();
}

PrepareRequest* PrepareRequest::New(::google::protobuf::Arena* arena) const {
  PrepareRequest* n = new PrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proposalid_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(proposalid_));
  _internal_metadata_.Clear();
}

bool PrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 InstanceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ProposalID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrepareRequest)
  return false;
#undef DO_
}

void PrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->proposalid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PrepareRequest)
}

::google::protobuf::uint8* PrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->proposalid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepareRequest)
  return target;
}

size_t PrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepareRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposalid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepareRequest)
    MergeFrom(*source);
  }
}

void PrepareRequest::MergeFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.proposalid() != 0) {
    set_proposalid(from.proposalid());
  }
}

void PrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareRequest::CopyFrom(const PrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareRequest::IsInitialized() const {
  return true;
}

void PrepareRequest::Swap(PrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareRequest::InternalSwap(PrepareRequest* other) {
  using std::swap;
  swap(instanceid_, other->instanceid_);
  swap(nodeid_, other->nodeid_);
  swap(proposalid_, other->proposalid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrepareReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareReply::kInstanceIDFieldNumber;
const int PrepareReply::kNodeIDFieldNumber;
const int PrepareReply::kProposalIDFieldNumber;
const int PrepareReply::kValueFieldNumber;
const int PrepareReply::kNoMoreAcceptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareReply::PrepareReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsPrepareReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrepareReply)
}
PrepareReply::PrepareReply(const PrepareReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nomoreaccepted_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(nomoreaccepted_));
  // @@protoc_insertion_point(copy_constructor:PrepareReply)
}

void PrepareReply::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nomoreaccepted_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(nomoreaccepted_));
  _cached_size_ = 0;
}

PrepareReply::~PrepareReply() {
  // @@protoc_insertion_point(destructor:PrepareReply)
  SharedDtor();
}

void PrepareReply::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrepareReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareReply::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrepareReply& PrepareReply::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsPrepareReply();
  return *internal_default_instance();
}

PrepareReply* PrepareReply::New(::google::protobuf::Arena* arena) const {
  PrepareReply* n = new PrepareReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareReply::Clear() {
// @@protoc_insertion_point(message_clear_start:PrepareReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nomoreaccepted_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(nomoreaccepted_));
  _internal_metadata_.Clear();
}

bool PrepareReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrepareReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 InstanceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ProposalID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool NoMoreAccepted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nomoreaccepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrepareReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrepareReply)
  return false;
#undef DO_
}

void PrepareReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrepareReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->proposalid(), output);
  }

  // bytes Value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // bool NoMoreAccepted = 5;
  if (this->nomoreaccepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->nomoreaccepted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PrepareReply)
}

::google::protobuf::uint8* PrepareReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrepareReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->proposalid(), target);
  }

  // bytes Value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // bool NoMoreAccepted = 5;
  if (this->nomoreaccepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->nomoreaccepted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PrepareReply)
  return target;
}

size_t PrepareReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrepareReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposalid());
  }

  // bool NoMoreAccepted = 5;
  if (this->nomoreaccepted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrepareReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrepareReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrepareReply)
    MergeFrom(*source);
  }
}

void PrepareReply::MergeFrom(const PrepareReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrepareReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.proposalid() != 0) {
    set_proposalid(from.proposalid());
  }
  if (from.nomoreaccepted() != 0) {
    set_nomoreaccepted(from.nomoreaccepted());
  }
}

void PrepareReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrepareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareReply::CopyFrom(const PrepareReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrepareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareReply::IsInitialized() const {
  return true;
}

void PrepareReply::Swap(PrepareReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareReply::InternalSwap(PrepareReply* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(instanceid_, other->instanceid_);
  swap(nodeid_, other->nodeid_);
  swap(proposalid_, other->proposalid_);
  swap(nomoreaccepted_, other->nomoreaccepted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareReply::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcceptRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptRequest::kInstanceIDFieldNumber;
const int AcceptRequest::kNodeIDFieldNumber;
const int AcceptRequest::kProposalIDFieldNumber;
const int AcceptRequest::kValueFieldNumber;
const int AcceptRequest::kFirstUnchosenIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptRequest::AcceptRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsAcceptRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AcceptRequest)
}
AcceptRequest::AcceptRequest(const AcceptRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&firstunchosenindex_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  // @@protoc_insertion_point(copy_constructor:AcceptRequest)
}

void AcceptRequest::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstunchosenindex_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  _cached_size_ = 0;
}

AcceptRequest::~AcceptRequest() {
  // @@protoc_insertion_point(destructor:AcceptRequest)
  SharedDtor();
}

void AcceptRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptRequest::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptRequest& AcceptRequest::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsAcceptRequest();
  return *internal_default_instance();
}

AcceptRequest* AcceptRequest::New(::google::protobuf::Arena* arena) const {
  AcceptRequest* n = new AcceptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AcceptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstunchosenindex_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  _internal_metadata_.Clear();
}

bool AcceptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AcceptRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 InstanceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ProposalID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 FirstUnchosenIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstunchosenindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AcceptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AcceptRequest)
  return false;
#undef DO_
}

void AcceptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AcceptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->proposalid(), output);
  }

  // bytes Value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->firstunchosenindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AcceptRequest)
}

::google::protobuf::uint8* AcceptRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AcceptRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->proposalid(), target);
  }

  // bytes Value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->firstunchosenindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcceptRequest)
  return target;
}

size_t AcceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcceptRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 ProposalID = 3;
  if (this->proposalid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposalid());
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->firstunchosenindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcceptRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcceptRequest)
    MergeFrom(*source);
  }
}

void AcceptRequest::MergeFrom(const AcceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.proposalid() != 0) {
    set_proposalid(from.proposalid());
  }
  if (from.firstunchosenindex() != 0) {
    set_firstunchosenindex(from.firstunchosenindex());
  }
}

void AcceptRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptRequest::CopyFrom(const AcceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptRequest::IsInitialized() const {
  return true;
}

void AcceptRequest::Swap(AcceptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptRequest::InternalSwap(AcceptRequest* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(instanceid_, other->instanceid_);
  swap(nodeid_, other->nodeid_);
  swap(proposalid_, other->proposalid_);
  swap(firstunchosenindex_, other->firstunchosenindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcceptReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptReply::kInstanceIDFieldNumber;
const int AcceptReply::kNodeIDFieldNumber;
const int AcceptReply::kProposalIDFieldNumber;
const int AcceptReply::kFirstUnchosenIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptReply::AcceptReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsAcceptReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AcceptReply)
}
AcceptReply::AcceptReply(const AcceptReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instanceid_, &from.instanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&firstunchosenindex_) -
    reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  // @@protoc_insertion_point(copy_constructor:AcceptReply)
}

void AcceptReply::SharedCtor() {
  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstunchosenindex_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  _cached_size_ = 0;
}

AcceptReply::~AcceptReply() {
  // @@protoc_insertion_point(destructor:AcceptReply)
  SharedDtor();
}

void AcceptReply::SharedDtor() {
}

void AcceptReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptReply::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptReply& AcceptReply::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsAcceptReply();
  return *internal_default_instance();
}

AcceptReply* AcceptReply::New(::google::protobuf::Arena* arena) const {
  AcceptReply* n = new AcceptReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AcceptReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&instanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firstunchosenindex_) -
      reinterpret_cast<char*>(&instanceid_)) + sizeof(firstunchosenindex_));
  _internal_metadata_.Clear();
}

bool AcceptReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AcceptReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 InstanceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ProposalID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 FirstUnchosenIndex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstunchosenindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AcceptReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AcceptReply)
  return false;
#undef DO_
}

void AcceptReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AcceptReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->instanceid(), output);
  }

  // uint64 NodeID = 3;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nodeid(), output);
  }

  // uint64 ProposalID = 4;
  if (this->proposalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->proposalid(), output);
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->firstunchosenindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AcceptReply)
}

::google::protobuf::uint8* AcceptReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AcceptReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->instanceid(), target);
  }

  // uint64 NodeID = 3;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nodeid(), target);
  }

  // uint64 ProposalID = 4;
  if (this->proposalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->proposalid(), target);
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->firstunchosenindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcceptReply)
  return target;
}

size_t AcceptReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcceptReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 InstanceID = 1;
  if (this->instanceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->instanceid());
  }

  // uint64 NodeID = 3;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 ProposalID = 4;
  if (this->proposalid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->proposalid());
  }

  // uint64 FirstUnchosenIndex = 5;
  if (this->firstunchosenindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->firstunchosenindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcceptReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcceptReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcceptReply)
    MergeFrom(*source);
  }
}

void AcceptReply::MergeFrom(const AcceptReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcceptReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instanceid() != 0) {
    set_instanceid(from.instanceid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.proposalid() != 0) {
    set_proposalid(from.proposalid());
  }
  if (from.firstunchosenindex() != 0) {
    set_firstunchosenindex(from.firstunchosenindex());
  }
}

void AcceptReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcceptReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptReply::CopyFrom(const AcceptReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcceptReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptReply::IsInitialized() const {
  return true;
}

void AcceptReply::Swap(AcceptReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptReply::InternalSwap(AcceptReply* other) {
  using std::swap;
  swap(instanceid_, other->instanceid_);
  swap(nodeid_, other->nodeid_);
  swap(proposalid_, other->proposalid_);
  swap(firstunchosenindex_, other->firstunchosenindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptReply::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SuccessRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuccessRequest::kFirstUnchosenIndexFieldNumber;
const int SuccessRequest::kNodeIDFieldNumber;
const int SuccessRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuccessRequest::SuccessRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsSuccessRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuccessRequest)
}
SuccessRequest::SuccessRequest(const SuccessRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&firstunchosenindex_, &from.firstunchosenindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  // @@protoc_insertion_point(copy_constructor:SuccessRequest)
}

void SuccessRequest::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&firstunchosenindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  _cached_size_ = 0;
}

SuccessRequest::~SuccessRequest() {
  // @@protoc_insertion_point(destructor:SuccessRequest)
  SharedDtor();
}

void SuccessRequest::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SuccessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuccessRequest::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuccessRequest& SuccessRequest::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsSuccessRequest();
  return *internal_default_instance();
}

SuccessRequest* SuccessRequest::New(::google::protobuf::Arena* arena) const {
  SuccessRequest* n = new SuccessRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuccessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SuccessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&firstunchosenindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  _internal_metadata_.Clear();
}

bool SuccessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuccessRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 FirstUnchosenIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstunchosenindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuccessRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuccessRequest)
  return false;
#undef DO_
}

void SuccessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuccessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->firstunchosenindex(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SuccessRequest)
}

::google::protobuf::uint8* SuccessRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SuccessRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->firstunchosenindex(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // bytes Value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuccessRequest)
  return target;
}

size_t SuccessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SuccessRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes Value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->firstunchosenindex());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuccessRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SuccessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SuccessRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuccessRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SuccessRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SuccessRequest)
    MergeFrom(*source);
  }
}

void SuccessRequest::MergeFrom(const SuccessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SuccessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.firstunchosenindex() != 0) {
    set_firstunchosenindex(from.firstunchosenindex());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
}

void SuccessRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SuccessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuccessRequest::CopyFrom(const SuccessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SuccessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuccessRequest::IsInitialized() const {
  return true;
}

void SuccessRequest::Swap(SuccessRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuccessRequest::InternalSwap(SuccessRequest* other) {
  using std::swap;
  value_.Swap(&other->value_);
  swap(firstunchosenindex_, other->firstunchosenindex_);
  swap(nodeid_, other->nodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuccessRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SuccessReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SuccessReply::kFirstUnchosenIndexFieldNumber;
const int SuccessReply::kNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SuccessReply::SuccessReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rpc_2eproto::InitDefaultsSuccessReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuccessReply)
}
SuccessReply::SuccessReply(const SuccessReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&firstunchosenindex_, &from.firstunchosenindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  // @@protoc_insertion_point(copy_constructor:SuccessReply)
}

void SuccessReply::SharedCtor() {
  ::memset(&firstunchosenindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  _cached_size_ = 0;
}

SuccessReply::~SuccessReply() {
  // @@protoc_insertion_point(destructor:SuccessReply)
  SharedDtor();
}

void SuccessReply::SharedDtor() {
}

void SuccessReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuccessReply::descriptor() {
  ::protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SuccessReply& SuccessReply::default_instance() {
  ::protobuf_rpc_2eproto::InitDefaultsSuccessReply();
  return *internal_default_instance();
}

SuccessReply* SuccessReply::New(::google::protobuf::Arena* arena) const {
  SuccessReply* n = new SuccessReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SuccessReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SuccessReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&firstunchosenindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&firstunchosenindex_)) + sizeof(nodeid_));
  _internal_metadata_.Clear();
}

bool SuccessReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuccessReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 FirstUnchosenIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &firstunchosenindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 NodeID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuccessReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuccessReply)
  return false;
#undef DO_
}

void SuccessReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuccessReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->firstunchosenindex(), output);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SuccessReply)
}

::google::protobuf::uint8* SuccessReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SuccessReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->firstunchosenindex(), target);
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuccessReply)
  return target;
}

size_t SuccessReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SuccessReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 FirstUnchosenIndex = 1;
  if (this->firstunchosenindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->firstunchosenindex());
  }

  // uint64 NodeID = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuccessReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SuccessReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SuccessReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SuccessReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SuccessReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SuccessReply)
    MergeFrom(*source);
  }
}

void SuccessReply::MergeFrom(const SuccessReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SuccessReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firstunchosenindex() != 0) {
    set_firstunchosenindex(from.firstunchosenindex());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
}

void SuccessReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SuccessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuccessReply::CopyFrom(const SuccessReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SuccessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuccessReply::IsInitialized() const {
  return true;
}

void SuccessReply::Swap(SuccessReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SuccessReply::InternalSwap(SuccessReply* other) {
  using std::swap;
  swap(firstunchosenindex_, other->firstunchosenindex_);
  swap(nodeid_, other->nodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SuccessReply::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
