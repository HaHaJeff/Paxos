// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Paxos_method_names[] = {
  "/Paxos/OnPrepare",
  "/Paxos/OnAccept",
  "/Paxos/OnSuccess",
};

std::unique_ptr< Paxos::Stub> Paxos::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Paxos::Stub> stub(new Paxos::Stub(channel));
  return stub;
}

Paxos::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnPrepare_(Paxos_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnAccept_(Paxos_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnSuccess_(Paxos_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Paxos::Stub::OnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::PrepareReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnPrepare_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::PrepareReply>* Paxos::Stub::AsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PrepareReply>::Create(channel_.get(), cq, rpcmethod_OnPrepare_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PrepareReply>* Paxos::Stub::PrepareAsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PrepareReply>::Create(channel_.get(), cq, rpcmethod_OnPrepare_, context, request, false);
}

::grpc::Status Paxos::Stub::OnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::AcceptReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnAccept_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::AcceptReply>* Paxos::Stub::AsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AcceptReply>::Create(channel_.get(), cq, rpcmethod_OnAccept_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AcceptReply>* Paxos::Stub::PrepareAsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AcceptReply>::Create(channel_.get(), cq, rpcmethod_OnAccept_, context, request, false);
}

::grpc::Status Paxos::Stub::OnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::SuccessReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnSuccess_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::SuccessReply>* Paxos::Stub::AsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SuccessReply>::Create(channel_.get(), cq, rpcmethod_OnSuccess_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::SuccessReply>* Paxos::Stub::PrepareAsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::SuccessReply>::Create(channel_.get(), cq, rpcmethod_OnSuccess_, context, request, false);
}

Paxos::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Paxos_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Paxos::Service, ::PrepareRequest, ::PrepareReply>(
          std::mem_fn(&Paxos::Service::OnPrepare), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Paxos_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Paxos::Service, ::AcceptRequest, ::AcceptReply>(
          std::mem_fn(&Paxos::Service::OnAccept), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Paxos_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Paxos::Service, ::SuccessRequest, ::SuccessReply>(
          std::mem_fn(&Paxos::Service::OnSuccess), this)));
}

Paxos::Service::~Service() {
}

::grpc::Status Paxos::Service::OnPrepare(::grpc::ServerContext* context, const ::PrepareRequest* request, ::PrepareReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Paxos::Service::OnAccept(::grpc::ServerContext* context, const ::AcceptRequest* request, ::AcceptReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Paxos::Service::OnSuccess(::grpc::ServerContext* context, const ::SuccessRequest* request, ::SuccessReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


