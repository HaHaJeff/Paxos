// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto
#ifndef GRPC_rpc_2eproto__INCLUDED
#define GRPC_rpc_2eproto__INCLUDED

#include "rpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class Paxos final {
 public:
  static constexpr char const* service_full_name() {
    return "Paxos";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status OnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::PrepareReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>> AsyncOnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>>(AsyncOnPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>> PrepareAsyncOnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>>(PrepareAsyncOnPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status OnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::AcceptReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>> AsyncOnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>>(AsyncOnAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>> PrepareAsyncOnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>>(PrepareAsyncOnAcceptRaw(context, request, cq));
    }
    virtual ::grpc::Status OnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::SuccessReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>> AsyncOnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>>(AsyncOnSuccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>> PrepareAsyncOnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>>(PrepareAsyncOnSuccessRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>* AsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrepareReply>* PrepareAsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>* AsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AcceptReply>* PrepareAsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>* AsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SuccessReply>* PrepareAsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status OnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::PrepareReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrepareReply>> AsyncOnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrepareReply>>(AsyncOnPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrepareReply>> PrepareAsyncOnPrepare(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrepareReply>>(PrepareAsyncOnPrepareRaw(context, request, cq));
    }
    ::grpc::Status OnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::AcceptReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcceptReply>> AsyncOnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcceptReply>>(AsyncOnAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcceptReply>> PrepareAsyncOnAccept(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcceptReply>>(PrepareAsyncOnAcceptRaw(context, request, cq));
    }
    ::grpc::Status OnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::SuccessReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SuccessReply>> AsyncOnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SuccessReply>>(AsyncOnSuccessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SuccessReply>> PrepareAsyncOnSuccess(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SuccessReply>>(PrepareAsyncOnSuccessRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::PrepareReply>* AsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrepareReply>* PrepareAsyncOnPrepareRaw(::grpc::ClientContext* context, const ::PrepareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AcceptReply>* AsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AcceptReply>* PrepareAsyncOnAcceptRaw(::grpc::ClientContext* context, const ::AcceptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SuccessReply>* AsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SuccessReply>* PrepareAsyncOnSuccessRaw(::grpc::ClientContext* context, const ::SuccessRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OnPrepare_;
    const ::grpc::internal::RpcMethod rpcmethod_OnAccept_;
    const ::grpc::internal::RpcMethod rpcmethod_OnSuccess_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status OnPrepare(::grpc::ServerContext* context, const ::PrepareRequest* request, ::PrepareReply* response);
    virtual ::grpc::Status OnAccept(::grpc::ServerContext* context, const ::AcceptRequest* request, ::AcceptReply* response);
    virtual ::grpc::Status OnSuccess(::grpc::ServerContext* context, const ::SuccessRequest* request, ::SuccessReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_OnPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnPrepare() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OnPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnPrepare(::grpc::ServerContext* context, const ::PrepareRequest* request, ::PrepareReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnPrepare(::grpc::ServerContext* context, ::PrepareRequest* request, ::grpc::ServerAsyncResponseWriter< ::PrepareReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnAccept() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OnAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAccept(::grpc::ServerContext* context, const ::AcceptRequest* request, ::AcceptReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnAccept(::grpc::ServerContext* context, ::AcceptRequest* request, ::grpc::ServerAsyncResponseWriter< ::AcceptReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OnSuccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_OnSuccess() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_OnSuccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnSuccess(::grpc::ServerContext* context, const ::SuccessRequest* request, ::SuccessReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOnSuccess(::grpc::ServerContext* context, ::SuccessRequest* request, ::grpc::ServerAsyncResponseWriter< ::SuccessReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OnPrepare<WithAsyncMethod_OnAccept<WithAsyncMethod_OnSuccess<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_OnPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnPrepare() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OnPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnPrepare(::grpc::ServerContext* context, const ::PrepareRequest* request, ::PrepareReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnAccept() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OnAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnAccept(::grpc::ServerContext* context, const ::AcceptRequest* request, ::AcceptReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OnSuccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_OnSuccess() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_OnSuccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OnSuccess(::grpc::ServerContext* context, const ::SuccessRequest* request, ::SuccessReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnPrepare() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::PrepareRequest, ::PrepareReply>(std::bind(&WithStreamedUnaryMethod_OnPrepare<BaseClass>::StreamedOnPrepare, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnPrepare(::grpc::ServerContext* context, const ::PrepareRequest* request, ::PrepareReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnPrepare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PrepareRequest,::PrepareReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnAccept() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::AcceptRequest, ::AcceptReply>(std::bind(&WithStreamedUnaryMethod_OnAccept<BaseClass>::StreamedOnAccept, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnAccept(::grpc::ServerContext* context, const ::AcceptRequest* request, ::AcceptReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnAccept(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AcceptRequest,::AcceptReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OnSuccess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_OnSuccess() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::SuccessRequest, ::SuccessReply>(std::bind(&WithStreamedUnaryMethod_OnSuccess<BaseClass>::StreamedOnSuccess, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_OnSuccess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OnSuccess(::grpc::ServerContext* context, const ::SuccessRequest* request, ::SuccessReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOnSuccess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SuccessRequest,::SuccessReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OnPrepare<WithStreamedUnaryMethod_OnAccept<WithStreamedUnaryMethod_OnSuccess<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_OnPrepare<WithStreamedUnaryMethod_OnAccept<WithStreamedUnaryMethod_OnSuccess<Service > > > StreamedService;
};


#endif  // GRPC_rpc_2eproto__INCLUDED
